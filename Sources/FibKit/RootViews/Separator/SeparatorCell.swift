//
//  SeparatorCell.swift
//  SmartStaff
//
//  Created artem on 25.04.2020.
//  Copyright Â© 2020 DIT. All rights reserved.
//
//  Template generated by Balashov Artem @pockerhead
//


import SkeletonView
import UIKit

/// Cell represents separator in list-like collections
public class SeparatorCell: UICollectionViewCell {
	
	public struct Appearance {
		public init(
			dottedColor: UIColor? = nil,
			defaultColor: UIColor? = nil
		) {
			self.dottedColor = dottedColor
			self.defaultColor = defaultColor
		}
		
		public var dottedColor: UIColor?
		public var defaultColor: UIColor?
	}
	
	public static var defaultAppearance = Appearance(
		dottedColor: .separator,
		defaultColor: .separator
	)
	
	public var dottedColor: UIColor? {
		SeparatorCell.defaultAppearance.dottedColor
	}
	
	public var defaultColor: UIColor? {
		SeparatorCell.defaultAppearance.defaultColor
	}

    // MARK: Outlets

    // MARK: Properties
    private let separatorView = DottedView()
    private var separatorViewLeft: NSLayoutConstraint?
    private var isDottedSeparator: Bool = true

    // MARK: Initialization

    override public func awakeFromNib() {
        super.awakeFromNib()
        configureUI()
    }

    // MARK: UI Configuration

    private func configureUI() {
        addSubview(separatorView)
        separatorView.anchor(topAnchor,
                             bottom: bottomAnchor,
                             right: rightAnchor,
                             heightConstant: 1)
        separatorViewLeft = separatorView.anchorWithReturnAnchors(left: leftAnchor,
                                                                  leftConstant: 16).first
    }
}

// MARK: ViewModelConfigurable

extension SeparatorCell: ViewModelConfigurable {

    typealias ViewModel = Separator

    public func configure(with data: ViewModelWithViewClass?) {
        guard let data = data as? ViewModel else {
            self.showAnimatedGradientSkeleton(usingGradient: .mainGradient)
            return
        }
        hideSkeleton()
        self.isDottedSeparator = data.isDotted
        self.separatorViewLeft?.constant = data.leftConstant
        applyAppearance()
    }

    public func sizeWith(_ targetSize: CGSize, data: ViewModelWithViewClass?) -> CGSize? {
        CGSize(width: targetSize.width, height: 1)
    }
	
	func applyAppearance() {
		backgroundColor = .clear
		if self.isDottedSeparator {
			separatorView.backgroundColor = .clear
			separatorView.dotColor = dottedColor
		} else {
			separatorView.backgroundColor = dottedColor
			separatorView.dotColor = .clear
		}
	}
}

public struct Separator: ViewModelWithViewClass {
    
    public var isDotted: Bool = true
    public var leftConstant: CGFloat = 16
    
    public func viewClass() -> ViewModelConfigurable.Type {
        SeparatorCell.self
    }
    
    public init(isDotted: Bool = true,
                leftConstant: CGFloat = 16) {
        self.isDotted = isDotted
        self.leftConstant = leftConstant
    }
    
    public static func defaultSolid(leftConstant: CGFloat = 0) -> Self {
        .init(isDotted: false, leftConstant: leftConstant)
    }
}
