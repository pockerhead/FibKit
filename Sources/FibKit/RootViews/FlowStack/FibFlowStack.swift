//
//  FibFlowStack.swift
//  SmartStaff
//
//  Created Артём Балашов on 26.05.2022.
//  Copyright © 2022 DIT. All rights reserved.
//
//  Template generated by Balashov Artem @pockerhead
//

public class FibFlowStackView: FibCoreView {
	
	// MARK: - Views
	let grid = FibGrid()
	
	// MARK: - Variables
	
	// MARK: - UI Configuration
	
	public override func configureUI() {
		super.configureUI()
		contentView.addSubview(grid)
		grid.isScrollEnabled = false
		grid.hideScrollIndicators()
		contentView.clipsToBounds = true
		contentView.layer.masksToBounds = true
	}
	
	public override func layoutSubviews() {
		super.layoutSubviews()
		grid.frame = bounds
		guard let data = data as? ViewModel else { return }
		_ = contentView.cornerRadius(data.cornerRadius)
	}
	
	// MARK: - Appearance
	
	public override func configureAppearance() {
		
	}
	
	// MARK: - ViewModel
	
	typealias ViewModel = FibFlowStack
	
	// MARK: - Configuration
	
	public override func sizeWith(_ targetSize: CGSize, data: ViewModelWithViewClass?, horizontal: UILayoutPriority, vertical: UILayoutPriority) -> CGSize? {
		guard let data = data as? ViewModel else {
			return .zero
		}
		var result = targetSize
		let provider = ViewModelSection(forceReassignLayout: true) {
			data.viewModels
		}
		.id((data.id ?? "Data") + "_HSTACKSECTION")
		.inset(by: data.insets)
		.flowLayout(spacing: data.spacing)
		provider.layout(collectionSize: targetSize)
		result.width = min(provider.contentSize.width, targetSize.width)
		result.height = min(provider.contentSize.height, targetSize.height)
		if let size = data.size {
			result = size.assignSize(selfSized: result, targetSize: targetSize)
		}
		return result
	}

	public override func prepareForReuse() {
		super.prepareForReuse()
		grid.subviews.forEach { view in
			(view as? CollectionViewReusableView)?.prepareForReuse()
		}
	}

	public override func configure(with data: ViewModelWithViewClass?) {
		super.configure(with: data)
		guard let data = data as? ViewModel else { return }
		contentView.backgroundColor = data.backgroundColor ?? .clear
		grid.provider = ViewModelSection(forceReassignLayout: true) {
			data.viewModels
		}
		.id((data.id ?? "Data") + "_HSTACKSECTION")
		.inset(by: data.insets)
		.flowLayout(spacing: data.spacing)
		.didReload { [weak self] in
			self?.grid.subviews.forEach { view in
				(view as? CollectionViewReusableView)?.prepareForReuse()
			}
		}
		grid.isUserInteractionEnabled = !data.interactive
	}
	
	// MARK: - Private
}

public class FibFlowStack: FibCoreViewModel {
	
	public var viewModels: [ViewModelWithViewClass?]
	public var spacing: CGFloat = 8
	public var insets: UIEdgeInsets = .zero
	public var backgroundColor: UIColor?
	public var cornerRadius: CGFloat = 0
	
	public init(@ViewModelBuilder _ viewModels: () -> [ViewModelWithViewClass?]) {
		self.viewModels = viewModels()
	}
	
	@discardableResult
	public func spacing(_ spacing: CGFloat) -> Self {
		self.spacing = spacing
		return self
	}
	
	@discardableResult
	public func inset(by insets: UIEdgeInsets) -> Self {
		self.insets = insets
		return self
	}
	
	@discardableResult
	public func inset(_ inset: UIEdgeInsets.Inset, _ val: CGFloat) -> Self {
		self.insets.apply(inset, value: val)
		return self
	}
	
	@discardableResult
	public func backgroundColor(_ color: UIColor) -> Self {
		self.backgroundColor = color
		return self
	}
	
	@discardableResult
	public func cornerRadius(_ cornerRadius: CGFloat) -> Self {
		self.cornerRadius = cornerRadius
		return self
	}
	
	public override func viewClass() -> ViewModelConfigurable.Type {
		FibFlowStackView.self
	}
}
