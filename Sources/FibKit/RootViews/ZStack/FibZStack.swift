//
//  FibZStack.swift
//  SmartStaff
//
//  Created Артём Балашов on 17.12.2022.
//  Copyright © 2022 DIT. All rights reserved.
//
//  Template generated by Balashov Artem @pockerhead
//

public final class FibZStackView: FibCoreView {
    
    // MARK: - Views
    
    // MARK: - Variables
    
    // MARK: - UI Configuration
    
	public override func configureUI() {
        super.configureUI()
    }
    
    // MARK: - Appearance
	
	public override func layoutSubviews() {
		super.layoutSubviews()
		guard let data = data as? FibZStack else { return }
		contentView.subviews
			.map({ $0 as? ViewModelConfigurable })
			.compactMap({ $0 })
			.enumerated()
			.forEach({ tupple in
				let (index, view) = tupple
				view.frame.size = view.sizeWith(
					bounds.size,
					data: data.viewModels[index],
					horizontal: .defaultLow,
					vertical: .defaultLow) ?? .zero
				view.frame.setCenterY(to: bounds)
			})
	}
	
	public override func sizeWith(_ targetSize: CGSize, data: ViewModelWithViewClass?, horizontal: UILayoutPriority, vertical: UILayoutPriority) -> CGSize? {
		guard let data = data as? FibZStack else { return .zero }
		configure(with: data, isFromSizeWith: true)
		var size: CGSize = contentView.subviews.enumerated().reduce(into: .zero) { partialResult, tuple in
			let (index, next) = tuple
			if let configuralbe = next as? ViewModelConfigurable,
			   let size = configuralbe.sizeWith(targetSize, data: data.viewModels[index], horizontal: horizontal, vertical: vertical) {
				if size.width > partialResult.width {
					partialResult.width = size.width
				}
				if size.height > partialResult.height {
					partialResult.height = size.height
				}
			}
		}
		if let strategy = data.size {
			size = strategy.assignSize(selfSized: size, targetSize: targetSize)
		}
		return size
	}
    
    // MARK: - Configuration
    
	public override func configure(with data: ViewModelWithViewClass?) {
        super.configure(with: data)
        guard let data = data as? FibZStack else { return }
		contentView.subviews.forEach({ $0.removeFromSuperview() })
		let views: [UIView] = data.viewModels.map({ $0?.getView() ?? UIView() }).compactMap({$0})
		contentView.zStackAddSubviews(views)
    }
    
    // MARK: - Private
}

// MARK: - ViewModel

public final class FibZStack: FibCoreViewModel {
	public var viewModels: [ViewModelWithViewClass?]
	public var backgroundColor: UIColor?
	
	public init(@ViewModelBuilder _ viewModels: () -> [ViewModelWithViewClass?]) {
		self.viewModels = viewModels()
	}
	
	@discardableResult
	public func backgroundColor(_ color: UIColor) -> Self {
		self.backgroundColor = color
		return self
	}
	
	public override func viewClass() -> ViewModelConfigurable.Type {
		FibZStackView.self
	}
}
