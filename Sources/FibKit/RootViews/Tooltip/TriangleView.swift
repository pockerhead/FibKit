//
//  TriangleView.swift
//  SmartStaff
//
//  Created Артём Балашов on 30.08.2022.
//  Copyright © 2022 DIT. All rights reserved.
//
//  Template generated by Balashov Artem @pockerhead
//

import UIKit

final class TriangleView: FibCoreView {
    
    // MARK: - Views
    let imageView = UIImageView()
    
    // MARK: - Variables
    
    // MARK: - UI Configuration
    override func configureUI() {
        super.configureUI()
        contentView.addSubview(imageView)
    }
    
    var vm: ViewModel?
    
    override func layoutSubviews() {
        super.layoutSubviews()
        let rect = bounds
        UIGraphicsBeginImageContextWithOptions(rect.size, false, UIScreen.main.scale)
        
        guard let context = UIGraphicsGetCurrentContext(),
              let data = self.data as? ViewModel else { return }
        switch data.orientation {
        case .up:
            context.move(to: .init(x: rect.minX, y: rect.maxY))
            context.addLine(to: .init(x: rect.maxX, y: rect.maxY))
            context.addLine(to: .init(x: rect.midX, y: rect.minY))
            context.closePath()
        case .down:
            context.move(to: .init(x: rect.minX, y: rect.minY))
            context.addLine(to: .init(x: rect.maxX, y: rect.minY))
            context.addLine(to: .init(x: rect.midX, y: rect.maxY))
            context.closePath()
        }
        data.backgroundColor.setFill()
        context.fillPath()
        let image = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        imageView.image = image
        imageView.frame = bounds
    }
    
    override func sizeWith(_ targetSize: CGSize, data: ViewModelWithViewClass?, horizontal: UILayoutPriority, vertical: UILayoutPriority) -> CGSize? {
        guard let data = data as? ViewModel else {
            return nil
        }

        return data.size?.assignSize(selfSized: .zero, targetSize: targetSize)
    }
    
    // MARK: - ViewModel
    
    final class ViewModel: FibCoreViewModel {
        
        var backgroundColor: UIColor = .red
        var orientation: Orientation = .down
        
        enum Orientation {
            case up
            case down
        }
        
        internal init(backgroundColor: UIColor = .red,
                      orientation: Orientation = .down) {
            self.backgroundColor = backgroundColor
            self.orientation = orientation
        }
        
        override func viewClass() -> ViewModelConfigurable.Type {
            TriangleView.self
        }
    }
    override func configure(with data: ViewModelWithViewClass?) {
        super.configure(with: data)
        self.vm = data as? ViewModel
    }
}
