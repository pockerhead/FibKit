//
//  EmbedGrid.swift
//  SmartStaff
//
//  Created Артём Балашов on 23.08.2021.
//  Copyright � 2021 DIT. All rights reserved.
//
//  Template generated by Balashov Artem @pockerhead
//

public final class EmbedGrid: FibCoreView {
    
    // MARK: - Views
    private let grid = FibGrid()
    
    // MARK: - Variables
    private var gridBackgroundColor = UIColor.clear
    private var gridCornerRadius: CGFloat = 0

    // MARK: - UI Configuration
    
	public override func configureUI() {
        super.configureUI()
        contentView.addSubview(grid)
        grid.hideScrollIndicators(horizontal: true, vertical: true)
        grid.isEmbedCollection = true
        grid.fillSuperview()
    }
    
	public override func layoutSubviews() {
        super.layoutSubviews()
		contentView.layer.cornerRadius = gridCornerRadius
    }
    
    // MARK: - Appearance
    
	public override func configureAppearance() {
        contentView.backgroundColor = gridBackgroundColor
    }
    
    // MARK: - ViewModel
    
    public final class ViewModel: FibCoreViewModel {
        var sections: [ViewModelSection]
		public var scrollDirection: UICollectionView.ScrollDirection = .horizontal
		public var backgroundColor: UIColor = .clear
		public var cornerRadius: CGFloat = 0
        public fileprivate(set) weak var grid: FibGrid?

		public init(@SectionBuilder _ sections: (() -> [ViewModelSection])) {
            self.sections = sections()
        }
        
		public override func viewClass() -> ViewModelConfigurable.Type {
            EmbedGrid.self
        }
        
        public func scrollDirection(_ direction: UICollectionView.ScrollDirection) -> Self {
            self.scrollDirection = direction
            return self
        }
        
        public func backgroundColor(_ color: UIColor) -> Self {
            self.backgroundColor = color
            return self
        }
        
        public func cornerRadius(_ radius: CGFloat) -> Self {
            self.cornerRadius = radius
            return self
        }
    }
    
    // MARK: - Configuration
    
	public override func configure(with data: ViewModelWithViewClass?) {
        super.configure(with: data)
        guard let data = data as? ViewModel else { return }
		grid.scrollDirection = data.scrollDirection == .horizontal ? .horizontal : .vertical
        grid.provider = SectionStack({data.sections})
        gridBackgroundColor = data.backgroundColor
        gridCornerRadius = data.cornerRadius
        
        data.grid = self.grid
        contentView.backgroundColor = gridBackgroundColor
    }
    
    // MARK: - Private
}
