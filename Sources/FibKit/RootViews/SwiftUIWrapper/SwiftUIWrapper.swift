//
//  SwiftUIWrapper.swift
//  FormView
//
//  Created artem on 17.11.2020.
//  Copyright � 2020 DIT Moscow. All rights reserved.
//
//  Template generated by Balashov Artem @pockerhead
//


import SwiftUI

struct SwiftUIWrapperView<Content>: View where Content: View {

    typealias ViewModel = SwiftUIWrapper<Content>

    var viewModel: SwiftUIWrapper<Content>?

    var body: some View {
        viewModel?.body
            .edgesIgnoringSafeArea(.all)
            .ignoreSafeAreaIfNedded()
    }
}



/// Wrapps any SwiftUI Content into UIKit view.
/// You may use it in any UIKit class and view.]
///
///
/// Example:
///~~~
///Text("Hello world!")
/// .font(.caption2)
/// .foregroundColor(.accentColor)
/// .background(Color.black)
/// .asViewModel(id: "My text")
/// .sizeStrategy(width: .inherit, height: .selfSized)
///~~~
///it returns SwiftUIWrapper<IdentifiableView<Your SwiftUIView type>> with id = "My text" and provided sizeStrategy.
///
///Example in UIViewController (in `viewDidLoad()`)
///~~~
///let model = Text("Hello world!")
///            .font(.body)
///            .foregroundColor(.white)
///            .background(Color.red)
///            .asViewModel(id: "1234")
///let view = model.viewClass().fromDequeuer()!
///view.alpha = 1
///self.view.addSubview(view)
///view.frame = self.view.bounds
///~~~
public final class SwiftUIWrapper<Content>: FibViewHeaderViewModel where Content: View {

    var body: Content
    var size: Size = Size()
    /// Similar to id
    public var storedId: String?
    public var sizeHash: String?
    var interactive: Bool = false
    var needRasterize: Bool = true
    public var userInfo: [AnyHashable: Any]?
    public var allowedStretchDirections: Set<StretchDirection> = []
    public var atTop: Bool = false
    public var minHeight: CGFloat? = 0
    public var maxHeight: CGFloat? = .greatestFiniteMagnitude
    public var preventFromReload: Bool = true
    public var passthrough = false
    public var rightSwipeViews: [SwipeView]?
    public var leftSwipeViews: [SwipeView]?
    public var disabledSafeAreaInsets: DisabledSafeAreaInsets = .never
    public var onSwipeOpenClosure: (()->())?
    public var onAppearClosure: ((UIView) -> Void)?
    public var onDissappearClosure: ((UIView) -> Void)?

    @available(*, deprecated, message: "Use init(content:,id:) instead")
    public init(@ViewBuilder content: (() -> Content)) {
        self.body = content()
    }
    
    public init(@ViewBuilder content: (() -> Content), id: String) {
        self.body = content()
        self.storedId = id
    }
    
    /// Identity of SwiftUIWrapper, must be uniq on any part of data
    /// - Parameter id: String id
    /// - Returns: SwiftUIWrapper
    @available(*, deprecated, message: "Use asViewModel(id:) instead")
    public func id(_ id: String?) -> Self {
        self.storedId = id
        return self
    }
    
    /// Size strategy of SwiftUIWrapper
    /// - Parameter size: Nested size, see docs of it
    /// - Returns: SwiftUIWrapper
    public func sizeStrategy(_ size: Size) -> Self {
        self.size = size
        return self
    }
    
    /// Disables rasterize of whole swiftUIWrapper view
    /// - Returns: SwiftUIWrapper
    public func disableRasterize() -> Self {
        self.needRasterize = false
        return self
    }
    
    /// Additional user-defined info
    /// - Parameter userInfo: dictionary [AnyHashable: Any]
    /// - Returns: SwiftUIWrapper
    public func userInfo(_ userInfo: [AnyHashable: Any]) -> Self {
        self.userInfo = userInfo
        return self
    }
    
    /// UIKit ViewClass of SwiftUIWrapper
    /// - Returns: if passthrough it returns as subclass of UIView, if not - subclass of UI
    /// CollectionViewCell
    public func viewClass() -> ViewModelConfigurable.Type {
        passthrough ? SwiftUIWrapperPassthroughContainer<Content>.self : SwiftUIWrapperContainer<Content>.self
    }
    
    /// Size hash to store in SizeSource of FormView, needs when id not changed but content changed and view need to resize
    /// - Parameter hash: Optional String hash
    /// - Returns: SwiftUIWrapper
    public func sizeHash(_ hash: String?) -> Self {
        self.sizeHash = hash
        return self
    }
    
    /// Defines view as user interactive (squeezes when user touches)
    /// - Parameter interactive: bool inateractve
    /// - Returns: SwiftUIWrapper
    public func interactive(_ interactive: Bool) -> Self {
        self.interactive = interactive
        return self
    }
    
    /// Adds edges to disable safe area insets in wrapper swiftUI view
    /// - Parameter disabledSafeAreaInsets: default = .never
    /// - Returns: self
    public func disabledSafeAreaInsets(_ disabledSafeAreaInsets: DisabledSafeAreaInsets) -> Self {
        self.disabledSafeAreaInsets = disabledSafeAreaInsets
        return self
    }
    
    /// Добавляет свайп на ячейку справа, лучше не добавлять больше 2х SwipeView (пока что)
    /// - Parameter swipeViews: массив SwipeView, лучше не добавлять больше 2х (пока что)
    /// - Returns: self
    public func rightSwipeViews(_ swipeViews: [SwipeView], onSwipeOpenClosure: (()->())? = nil) -> Self {
        self.rightSwipeViews = swipeViews
        self.onSwipeOpenClosure = onSwipeOpenClosure
        if let first = swipeViews.first {
            self.rightSwipeViews?[0] = SwipeView(isFirst: true,
                                            action: first.action,
                                            title: first.title,
                                            icon: first.icon,
                                            background: first.background,
                                            secondBackground: first.secondBackground)
        }
        return self
    }
    
    /// Добавляет свайп на ячейку  слева, лучше не добавлять больше 2х SwipeView (пока что)
    /// - Parameter swipeViews: массив SwipeView, лучше не добавлять больше 2х (пока что)
    /// - Returns: self
    public func leftSwipeViews(_ swipeViews: [SwipeView], onSwipeOpenClosure: (()->())? = nil) -> Self {
        self.leftSwipeViews = swipeViews
        self.onSwipeOpenClosure = onSwipeOpenClosure
        if let first = swipeViews.first {
            self.leftSwipeViews?[0] = SwipeView(isFirst: true,
                                            action: first.action,
                                            title: first.title,
                                            icon: first.icon,
                                            background: first.background,
                                            secondBackground: first.secondBackground)
        }
        return self
    }
    
    /// Allowed stretch directions when sets SwiftUIWrapper as FormViewHeader
    /// - Parameter dirs: set of directions, allowed values: .up, .down
    /// - Returns: SwiftUIWrapper
    public func allowedStretchDirections(_ dirs: Set<StretchDirection>) -> Self {
        self.allowedStretchDirections = dirs
        return self
    }
    
    /// Defines SwiftUIWrapper view at top or behind the FormView
    /// - Parameter atTop: bool atTop
    /// - Returns: SwiftUIWrapper
    public func atTop(_ atTop: Bool) -> Self {
        self.atTop = atTop
        return self
    }
    
    /// Minimal height of SwiftUIWrapper as FormViewHeader
    /// - Parameter minHeight: CGFloat minHeight
    /// - Returns: SwiftUIWrapper
    public func minHeight(_ minHeight: CGFloat) -> Self {
        self.minHeight = minHeight
        return self
    }
    
    /// closure that calls when view appears on screen
    /// - Parameter onAppear: closure that calls when view appears on screen
    /// - Returns: SwiftUIWrapper
    public func onAppear(_ onAppear: ((UIView) -> Void)?) -> Self {
        self.onAppearClosure = onAppear
        return self
    }
    
    /// closure that calls when view dissappears off the screen
    /// - Parameter onAppear: closure that calls when view dissappears off the screen
    /// - Returns: SwiftUIWrapper
    public func onDissappear(_ onDissappear: ((UIView) -> Void)?) -> Self {
        self.onDissappearClosure = onDissappear
        return self
    }
    
    /// Maximum height of SwifrtUIWrapper as FormViewHeader
    /// - Parameter maxHeight: CGFloat maxHeight
    /// - Returns: SwiftUIWrapper
    public func maxHeight(_ maxHeight: CGFloat) -> Self {
        self.maxHeight = maxHeight
        return self
    }
    
    /// Defines if needed SwiftUIWrapper as passthrough touches to FormView
    /// - Parameter passthrough: bool passthrough
    /// - Returns: SwiftUIWrapper
    public func passthrough(_ passthrough: Bool) -> Self {
        self.passthrough = passthrough
        return self
    }
    
    /// Prevents view from reload when reload whole FormView
    /// - Parameter preventFromReload: bool preventFromReload
    /// - Returns: SwiftUIWrapper
    public func preventFromReload(_ preventFromReload: Bool) -> Self {
        self.preventFromReload = preventFromReload
        return self
    }
    
    fileprivate func _setBody(_ body: Content) -> Self {
        self.body = body
        return self
    }

    
    /// DTO struct to define size of SwiftUIWrapper
    public struct Size {

        var width: Strategy = .inherit
        var height: Strategy = .inherit
        
        /// DTO struct to define size of SwiftUIWrapper
        /// - Parameters:
        ///   - width: Layout strategy for width, enum, see doc of SwiftUIWrapper.Size.Strategy
        ///   - height: Layout strategy form height, enum, see doc of SwiftUIWrapper.Size.Strategy
        public init(width: SwiftUIWrapper.Size.Strategy = .inherit,
                    height: SwiftUIWrapper.Size.Strategy = .inherit) {
            self.width = width
            self.height = height
        }
        
        /// Layout strategy
        public enum Strategy: Equatable {
            
            /// Inherits dimension from FormView layout manager
            case inherit
            /// Layouts dimension to instrinsic size
            case selfSized
            /// Absolute value in CGFloat
            case absolute(CGFloat)
        }
    }
}

struct SwiftUIWrapper_Previews: PreviewProvider {

	static let viewModel = SwiftUIWrapperView<AnyView>.ViewModel (content: {
		AnyView(EmptyView())
	}, id: "")

    static var previews: some View {
        Group {
            SwiftUIWrapperView(viewModel: viewModel)
        }
    }
}
