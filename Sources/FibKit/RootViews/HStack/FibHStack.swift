//
//  HStack.swift
//  SmartStaff
//
//  Created Артём Балашов on 26.05.2022.
//  Copyright © 2022 DIT. All rights reserved.
//
//  Template generated by Balashov Artem @pockerhead
//

public class FibHStackView: FibCoreView {
    
    // MARK: - Views
    let grid = FibGrid()
    
    // MARK: - Variables
    
    // MARK: - UI Configuration
    
	public override func configureUI() {
        super.configureUI()
        contentView.addSubview(grid)
        grid.isScrollEnabled = false
		grid.isAsync = false
        grid.hideScrollIndicators()
    }
    
	public override func layoutSubviews() {
        super.layoutSubviews()
        grid.frame = bounds
    }
    
    // MARK: - Appearance
    
	public override func configureAppearance() {
        
    }
    
    // MARK: - ViewModel
    
    typealias ViewModel = FibHStack
    
    // MARK: - Configuration
    
	public override func sizeWith(_ targetSize: CGSize, data: ViewModelWithViewClass?, horizontal: UILayoutPriority, vertical: UILayoutPriority) -> CGSize? {
        guard let data = data as? ViewModel else {
            return .zero
        }
        
        let sizes = data.viewModels.map({
            FibGridViewSource.shared.view(data: $0, index: 0).sizeWith(targetSize,
                                                                       data: $0,
                                                                       horizontal: .fittingSizeLevel,
                                                                       vertical: .fittingSizeLevel)
        })
            .compactMap({ $0 })
		let height = (sizes.max(by: \.height)?.height ?? 0) + data.insets.verticalSum
        let width = sizes.reduce(0, { acc, next in acc + next.width })
        let spacing = data.spacing * CGFloat(data.viewModels.count - 1)
        let resultWidth = width + spacing + 1
        var isNeedFullWidth = true
        switch data.justifyContent {
        case .start:
            isNeedFullWidth = false
        default: break
        }
		var result: CGSize = .init(width: isNeedFullWidth ? targetSize.width : resultWidth, height: height)
		if let size = data.size {
			result = size.assignSize(selfSized: result, targetSize: targetSize)
		}
        return result
    }

	public override func prepareForReuse() {
		super.prepareForReuse()
		grid.subviews.forEach { view in
			(view as? CollectionViewReusableView)?.prepareForReuse()
		}
	}

	public override func configure(with data: ViewModelWithViewClass?) {
		super.configure(with: data)
		guard let data = data as? ViewModel else { return }
		contentView.backgroundColor = data.backgroundColor ?? .clear
		grid.provider = ViewModelSection(forceReassignLayout: true) {
			data.viewModels
		}
		.id((data.id ?? "Data") + "_HSTACKSECTION")
		.inset(by: data.insets)
		.layout(RowLayout(spacing: data.spacing,
						  justifyContent: data.justifyContent,
						  alignItems: data.alignItems),
				scrollDirection: .horizontal)
		.didReload { [weak self] in
			self?.grid.subviews.forEach { view in
				(view as? CollectionViewReusableView)?.prepareForReuse()
			}
		}
		
		grid.isUserInteractionEnabled = !data.interactive
    }
    
    // MARK: - Private
}

public class FibHStack: FibCoreViewModel {
    
    public var viewModels: [ViewModelWithViewClass?]
	public var spacing: CGFloat = 8
	public var justifyContent: JustifyContent = .start
	public var alignItems: AlignItem = .center
	public var insets: UIEdgeInsets = .zero
	public var backgroundColor: UIColor?
    
	public init(@ViewModelBuilder _ viewModels: () -> [ViewModelWithViewClass?]) {
        self.viewModels = viewModels()
    }
    
	@discardableResult
	public func spacing(_ spacing: CGFloat) -> Self {
        self.spacing = spacing
        return self
    }
    
	@discardableResult
	public func justifyContent(_ justifyContent: JustifyContent) -> Self {
        self.justifyContent = justifyContent
        return self
    }
	
	@discardableResult
	public func alignItems(_ alignItems: AlignItem) -> Self {
		self.alignItems = alignItems
		return self
	}
    
	@discardableResult
	public func inset(by insets: UIEdgeInsets) -> Self {
        self.insets = insets
        return self
    }
	
	@discardableResult
	public func inset(_ inset: UIEdgeInsets.Inset, _ val: CGFloat) -> Self {
		self.insets.apply(inset, value: val)
		return self
	}
	
	@discardableResult
	public func backgroundColor(_ color: UIColor) -> Self {
		self.backgroundColor = color
		return self
	}
    
	public override func viewClass() -> ViewModelConfigurable.Type {
        FibHStackView.self
    }
}
