# Rules sorteb by alphabet

disabled_rules:
- private_over_fileprivate #Prefer private over fileprivate declarations
- force_cast # Force casts should be avoided
# - force_try # Force tries should be avoided
# - generic_type_name # Generic type name should only contain alphanumeric characters, start with an uppercase character and span between 1 and 20 characters in length
- identifier_name # Allowed alphanumeric characters, start with a lowercase character or contain only capital letters. Min длина 3 символа, Max 20. Ругается на _ivar -ы
- multiple_closures_with_trailing_closure # Trailing closure syntax should not be used when passing more than one closure argument
- redundant_string_enum_value # String enum values can be omitted when they are equal to the enumcase name
# - shorthand_operator
- todo # TODOs and FIXMEs should be resolved
# - type_name # Type name should only contain alphanumeric characters, start with an uppercase character and span between 3 and 40 characters in length
- void_return # Returning Void in a function declaration is redundant.

opt_in_rules:
# Включение опциональных правил (по умолчанию они выключены). 
- anyobject_protocol # для протоколов класса предпочтительно использовать AnyObject вместо class. Пример: protocol MyProtocol: AnyPbject {}
# - array_init # для преобразования коллекции в массив предпочтительно использовать конструктор Array. Например Array(seq) вместо seq.map { $0 }. Несовместимо с rxSwift
# - attributes # аттрибуты (@objc, IBOutlet...) должны быть на одной строке с названием переменной
- closure_end_indentation # правило на закрывающую скобку замыкания }. порождает много warning'ов в Rx
- closure_spacing # Closure expressions should have a single space inside each brace. Корректно: { $0.contains > 0 } Некорректно: {$0.contains > 0}
- collection_alignment # если Array literal занимает несколько строк, indent у всех должен быть одинаковым.
- colon # Colons should be next to the identifier when specifying a type and next to the key in dictionary literals
# - conditional_returns_on_newline # запрещает return в одной строке с Conditional statements, например guard true else { return }
- contains_over_first_not_nil # Prefer contains over first(where:) != nil
# - convenience_type # Types used for hosting only static members should be implemented as a caseless enum to avoid instantiation
# - discouraged_object_literal # запрещает использование литералов создания объектов, например #imageLiteral(resourceName: "image.jpg")
# - discouraged_optional_boolean # запрещает опциональный Bool.
# - discouraged_optional_collection # запрещает опциональные коллекции, например [Int]?.
- empty_count # Prefer checking isEmpty over comparing count to zero.
- empty_enum_arguments # Arguments can be omitted when matching enums with associated types if they are not used.
- empty_parameters # Prefer () -> over Void ->
- empty_string # Prefer checking isEmpty over comparing string to an empty string literal
# - explicit_acl # All declarations should specify Access Control Level keywords explicitly
# - explicit_enum_raw_value # Enums should be explicitly assigned their raw values
- explicit_init # Explicitly calling .init() should be avoided.
# - explicit_self # Обязывает всегда указывать 'self.' при обращении к методам и проперти.
# - explicit_top_level_acl # Top-level declarations should specify Access Control Level keywords explicitly. Нам не подходит
# - explicit_type_interface # Properties should have a type interface. Например var retriesCount: Int = 3 
# - extension_access_modifier # Prefer to use extension access modifiers. Нам не подходит
- fallthrough # Fallthrough should be avoided.
- fatal_error_message # A fatalError call should have a message
# - file_header # Header comments should be consistent with project patterns
# - file_name # File name should match a type or extension declared in the file (if any).
- first_where # Prefer using .first(where:) over .filter { }.first in collections.
# - force_unwrapping # Force unwrapping should be avoided
# - function_default_parameter_at_end # Prefer to locate parameters with defaults toward the end of the parameter list.
- identical_operands # Comparing two identical operands is likely a mistake. Некорректно: foo.aProperty == foo.aProperty
- implicit_return # Prefer implicit returns in closures.
# - implicitly_unwrapped_optional # Implicitly unwrapped optionals should be avoided when possible. Корректно: @IBOutlet var label: UILabel! Некорректно: let int: Int! = 42. Пока что не готовы, у нас есть конструкции var viewModel: VoewModel!
# - joined_default_parameter # Discouraged explicit usage of the default separator. Корректно: bar.joined() Некорректно: bar.joined(separator: "")
- legacy_random # Prefer using type.random(in:) over legacy functions.
- literal_expression_end_indentation # Array and dictionary literal end should have the same indentation as the line that started it
# - lower_acl_than_parent # Ensure definitions have a lower access control level than their enclosing parent
# - missing_docs # Declarations should be documented. Мы пока к такому не готовы
# - modifier_order # Modifier order should be consistent
# - multiline_arguments # Arguments should be either on the same line, or one per line.
# - multiline_function_chains # Chained function calls should be either on the same line, or one per line.
# - multiline_parameters # Functions and methods parameters should be either on the same line, or one per line
# - nimble_operator # Prefer Nimble operator overloads over free matcher functions. Мы не используем Nimble
# - no_extension_access_modifier # Prefer not to use extension access modifiers
# - no_grouping_extension # Extensions shouldn't be used to group code within the same source file. Нам не подходит
# - number_separator
- object_literal # Prefer object literals over image and color inits
- operator_usage_whitespace # Operators should be surrounded by a single whitespace when they are being used
- overridden_super_call # Some overridden methods should always call super
- override_in_extension # Extensions shouldn't override declarations
- pattern_matching_keywords # Combine multiple pattern matching bindings by moving keywords out of tuples. По сути – более лакончиное представление switch case
# - prefixed_toplevel_constant # Top-level constants should be prefixed by k. Корректно: let kFoo = 20.0 Некорректно: let foo = 2
# - private_action # IBActions should be private
# - private_outlet # IBOutlets should be private to avoid leaking UIKit to higher layers
# - prohibited_interface_builder # Creating views using Interface Builder should be avoided. Нам не подходит – we ♥ InterfaceBuilder
- prohibited_super_call # Some methods should not call super
# - quick_discouraged_call # Discouraged call inside 'describe' and/or 'context' block.
# - quick_discouraged_focused_test # Discouraged focused test. Other tests won't run while this one is focused.
# - quick_discouraged_pending_test # Discouraged pending test. This test won't run while it's marked as pending
- redundant_nil_coalescing # nil coalescing operator is only evaluated if the lhs is nil, coalescing operator with nil as rhs is redundant
# - redundant_type_annotation # Variables should not have redundant type annotation. Корректно: let url = URL() Некорректно: let url: URL = URL()
# - required_enum_case # Enums conforming to a specified protocol must implement a specific case(s)
- single_test_class # Test files should contain a single QuickSpec or XCTestCase class.
- sorted_first_last # Prefer using min() or max() over sorted().first or sorted().last . Корректно: let min = myList.max(by: { $0 < $1 }) Некорректно: let min = myList.sorted { $0 < $1 }.last
- sorted_imports # Imports should be sorted
- static_operator # Operators should be declared as static functions, not free functions
# - strict_fileprivate # fileprivate should be avoided.
# - switch_case_on_newline # Cases inside a switch should always be on a newline
- toggle_bool # Prefer someBool.toggle() over someBool = !someBool
# - trailing_closure # Trailing closure syntax should be used whenever possible. Корректно: foo.map { $0 + 1 } Некорректно: foo.map({ $0 + 1 }). Несовместимо с Rx
# - unavailable_function # Unimplemented functions should be marked as unavailable
- unneeded_parentheses_in_closure_argument # Parentheses are not needed when declaring closure arguments. Корректно: let foo = { bar in } Некорректно: call(arg: { (bar) in })
- untyped_error_in_catch # Catch statements should not declare error variables without type casting
- unused_import # All imported modules should be required to make the file compile
- unused_optional_binding # Prefer != nil over let _ =
- unused_private_declaration # Private declarations should be referenced in that file
- valid_ibinspectable # @IBInspectable should be applied to variables only, have its type explicit and be of a supported type
- vertical_parameter_alignment_on_call # Function parameters should be aligned vertically if they're in multiple lines in a method call
- yoda_condition # The variable should be placed on the left, the constant on the right of a comparison operator. Корректно: if foo == 42 {} Некорректно: if 42 == foo {}

# Включение на втором этапе:
# - private_action
# - private_outlet
# - force_cast
# - force_unwrapping
# - todo
# - function_default_parameter_at_end
# вырезаем swiftlint:disable

included:
- SmartStaff

excluded:
- Pod
- Carthage
- SmartStaff/GantaView/views/SpreadsheetView/

identifier_name:
  min_length:
    warning: 2
    error: 0
  max_length:
    warning: 36
    error: 40
  # allowed_symbols: "_"
  excluded: # excluded via string array
    - id
    - x
    - y
    - i

closure_body_length: # ограничение на длину тела замыкания
  warning: 25
  error: 30

cyclomatic_complexity:
  warning: 10
  error: 15
  ignores_case_statements: true

file_length:
  warning: 650
  error: 700

function_body_length:
  warning: 40
  error: 60

function_parameter_count:
  warning: 10
  error: 12

line_length:
  ignores_urls: true
  ignores_comments: true
  ignores_interpolated_strings: true
  warning: 130
  error: 130

large_tuple:
  warning: 3
  error: 3 # Корректно: (Int, Int) или (Int, Int, Int). Warning / Error: (Int, Int, Int, Int)

nesting:
  type_level:
    warning: 3 # Глубина вложенности типов не больше 3
    error: 3

type_body_length:
  warning: 400
  error: 450

type_name:
  min_length:
    warning: 0
    error: 0
  max_length:
    warning: 40
    error: 42



comma: error

control_statement: error

empty_count: error

# force_cast: error

implicit_getter: error

implicit_return: error

multiline_parameters: error

operator_whitespace: error

redundant_optional_initialization: error

return_arrow_whitespace: error

syntactic_sugar: error

trailing_whitespace:
  ignores_empty_lines: true

unneeded_break_in_switch: error

unneeded_parentheses_in_closure_argument: error

vertical_parameter_alignment: error

vertical_parameter_alignment_on_call: error

warning_threshold: 11
reporter: "xcode"


